jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
0 0
0 0
2 0
0 0
1 0
0 0
2 0
1 0
1 0
0 0
1 0
0 0
2 0
1 0
1 0
(0,true)
(0,true)
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
0 0
0 0
2 0
(0,true)
--------------------------------------------------
0 0
1 0
0 0
2 0
1 0
1 0
(0,true)
--------------------------------------------------
0 0
1 0
0 0
2 0
1 0
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
java.lang.NumberFormatException: For input string: ".X.X......X"
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:569)
	at java.lang.Integer.parseInt(Integer.java:615)
	at scala.collection.immutable.StringLike.toInt(StringLike.scala:307)
	at scala.collection.immutable.StringLike.toInt$(StringLike.scala:307)
	at scala.collection.immutable.StringOps.toInt(StringOps.scala:29)
	at MyScanner.nextInt(count-luck.scala:25)
	at Main$.$anonfun$new$1(count-luck.scala:102)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.delayedEndpoint$Main$1(count-luck.scala:99)
	at Main$delayedInit$body.apply(count-luck.scala:47)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at Main$.main(count-luck.scala:47)
	at Main.main(count-luck.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.ScriptRunner.runCompiled(ScriptRunner.scala:170)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1$adapted(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$withCompiledScript$2(ScriptRunner.scala:156)
	at scala.tools.nsc.ScriptRunner.runScript(ScriptRunner.scala:124)
	at scala.tools.nsc.ScriptRunner.runScriptAndCatch(ScriptRunner.scala:200)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:63)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
0 0
1 0
0 0
2 0
1 0
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
List((0,false), (0,false), (0,false), (0,false))
0 0
List((0,false), (0,false), (0,true), (0,false))
1 0
List((0,false), (0,false), (0,false), (0,false))
0 0
List((0,true), (0,false), (0,false), (0,true))
2 0
List((0,true), (0,false), (0,false), (0,false))
1 0
List((0,true), (0,false), (0,false), (0,false))
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 2 7 M
DEBUG: 2 8 .
DEBUG: 2 9 .
DEBUG: 2 10 .
DEBUG: 3 10 .
DEBUG: 3 9 X
List((0,false), (0,false), (0,false), (0,false))
0 0
DEBUG: 1 10 X
List((0,false), (0,false), (0,true), (0,false))
1 0
DEBUG: 1 9 .
DEBUG: 1 8 X
List((0,false), (0,false), (0,false), (0,false))
0 0
List((0,true), (0,false), (0,false), (0,true))
2 0
DEBUG: 3 8 X
List((0,true), (0,false), (0,false), (0,false))
1 0
DEBUG: 2 6 X
DEBUG: 3 7 X
DEBUG: 1 7 X
List((0,true), (0,false), (0,false), (0,false))
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 2 7 M
DEBUG: 2 8 .
DEBUG: 2 9 .
DEBUG: 2 10 .
DEBUG: 3 10 .
DEBUG: 3 9 X
List((0,false), (0,false), (0,false), (0,false))
0 0
DEBUG: 1 10 X
List((0,false), (0,false), (0,true), (0,false))
1 0
DEBUG: 1 9 .
DEBUG: 1 8 X
DEBUG: 0 9 .
DEBUG: 0 10 X
DEBUG: 0 8 .
DEBUG: 0 7 .
DEBUG: 0 6 .
DEBUG: 0 5 .
DEBUG: 0 4 .
DEBUG: 0 3 X
DEBUG: 1 4 X
List((0,false), (0,false), (0,false), (0,false))
0 0
DEBUG: 1 5 .
DEBUG: 1 6 X
DEBUG: 2 5 .
DEBUG: 2 6 X
DEBUG: 2 4 X
DEBUG: 3 5 .
DEBUG: 3 6 X
DEBUG: 3 4 .
DEBUG: 3 3 .
DEBUG: 3 2 .
DEBUG: 3 1 .
DEBUG: 3 0 .
DEBUG: 2 0 .
DEBUG: 2 1 X
DEBUG: 1 0 .
DEBUG: 1 1 X
DEBUG: 0 0 .
DEBUG: 0 1 X
List((0,false), (0,false), (0,false), (0,false))
0 0
List((0,false), (0,false), (0,false), (0,true))
1 0
List((0,false), (0,false), (0,false), (0,true))
1 0
List((0,false), (0,false), (0,false), (0,true))
1 0
List((0,false), (0,true), (0,false), (0,false))
1 0
DEBUG: 2 2 X
List((0,false), (0,true), (0,false), (0,false))
1 0
DEBUG: 2 3 .
DEBUG: 1 3 .
DEBUG: 1 2 *
List((0,false), (0,false), (0,false), (0,false))
0 0
List((0,false), (0,false), (0,false), (0,true))
1 0
List((0,false), (0,true), (0,false), (0,true))
2 0
List((0,false), (0,true), (0,false), (0,false))
1 0
List((0,false), (0,true), (0,false), (0,false))
1 0
List((0,false), (0,false), (0,true), (0,false))
1 0
List((0,false), (0,false), (0,true), (0,false))
1 0
List((0,false), (0,true), (0,true), (0,false))
2 0
List((0,false), (0,true), (0,false), (0,false))
1 0
DEBUG: 1 7 X
List((0,false), (0,true), (0,false), (0,false))
1 0
List((0,false), (0,true), (0,false), (0,false))
1 0
List((0,false), (0,true), (0,false), (0,false))
1 0
List((0,false), (0,false), (0,false), (0,true))
1 0
List((0,true), (0,false), (0,false), (0,true))
2 0
DEBUG: 3 8 X
List((0,true), (0,false), (0,false), (0,false))
1 0
DEBUG: 3 7 X
List((0,true), (0,false), (0,false), (0,false))
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 2 7 M
DEBUG: 2 8 .
DEBUG: 2 9 .
DEBUG: 2 10 .
DEBUG: 3 10 .
DEBUG: 3 9 X
0 0
DEBUG: 1 10 X
1 0
DEBUG: 1 9 .
DEBUG: 1 8 X
DEBUG: 0 9 .
DEBUG: 0 10 X
DEBUG: 0 8 .
DEBUG: 0 7 .
DEBUG: 0 6 .
DEBUG: 0 5 .
DEBUG: 0 4 .
DEBUG: 0 3 X
DEBUG: 1 4 X
0 0
DEBUG: 1 5 .
DEBUG: 1 6 X
DEBUG: 2 5 .
DEBUG: 2 6 X
DEBUG: 2 4 X
DEBUG: 3 5 .
DEBUG: 3 6 X
DEBUG: 3 4 .
DEBUG: 3 3 .
DEBUG: 3 2 .
DEBUG: 3 1 .
DEBUG: 3 0 .
DEBUG: 2 0 .
DEBUG: 2 1 X
DEBUG: 1 0 .
DEBUG: 1 1 X
DEBUG: 0 0 .
DEBUG: 0 1 X
0 0
1 0
1 0
1 0
1 0
DEBUG: 2 2 X
1 0
DEBUG: 2 3 .
DEBUG: 1 3 .
DEBUG: 1 2 *
0 0
1 0
2 0
1 0
1 0
1 0
1 0
2 0
1 0
DEBUG: 1 7 X
1 0
1 0
1 0
1 0
2 0
DEBUG: 3 8 X
1 0
DEBUG: 3 7 X
1 0
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 2 7 M
DEBUG: 2 8 .
DEBUG: 2 9 .
DEBUG: 2 10 .
DEBUG: 3 10 .
DEBUG: 3 9 X
DEBUG 2: 0 List()
DEBUG: 1 10 X
DEBUG 2: 0 List((0,true))
DEBUG: 1 9 .
DEBUG: 1 8 X
DEBUG: 0 9 .
DEBUG: 0 10 X
DEBUG: 0 8 .
DEBUG: 0 7 .
DEBUG: 0 6 .
DEBUG: 0 5 .
DEBUG: 0 4 .
DEBUG: 0 3 X
DEBUG: 1 4 X
DEBUG 2: 0 List()
DEBUG: 1 5 .
DEBUG: 1 6 X
DEBUG: 2 5 .
DEBUG: 2 6 X
DEBUG: 2 4 X
DEBUG: 3 5 .
DEBUG: 3 6 X
DEBUG: 3 4 .
DEBUG: 3 3 .
DEBUG: 3 2 .
DEBUG: 3 1 .
DEBUG: 3 0 .
DEBUG: 2 0 .
DEBUG: 2 1 X
DEBUG: 1 0 .
DEBUG: 1 1 X
DEBUG: 0 0 .
DEBUG: 0 1 X
DEBUG 2: 0 List()
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG: 2 2 X
DEBUG 2: 0 List((0,true))
DEBUG: 2 3 .
DEBUG: 1 3 .
DEBUG: 1 2 *
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true), (0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true), (0,true))
DEBUG 2: 0 List((0,true))
DEBUG: 1 7 X
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true))
DEBUG 2: 0 List((0,true), (0,true))
DEBUG: 3 8 X
DEBUG 2: 0 List((0,true))
DEBUG: 3 7 X
DEBUG 2: 0 List((0,true))
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:77: error: ';' expected but ',' found.
            (0, false),
                      ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:79: error: Missing closing brace `}' assumed here
          if(iy + 1 < n && !arrB(iy + 1)(ix))
          ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:81: error: ';' expected but 'else' found.
          else
          ^
three errors found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 0 2 M
DEBUG: 0 1 .
DEBUG: 0 0 *
DEBUG: 1 1 X
DEBUG 2: 0 List((0,true))
DEBUG: 1 2 .
DEBUG 2: 0 List()
DEBUG 2: 0 List((0,true), (0,true))
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 0 2 M
DEBUG: 0 1 .
DEBUG: 0 0 *
DEBUG: 1 1 X
DEBUG 1: 0 List((0,true))
DEBUG 3: 0 List((0,true))
DEBUG: 1 2 .
DEBUG 1: 0 List()
DEBUG 3: 0 List()
DEBUG 1: 0 List((0,true), (0,true))
DEBUG 3: 0 List((0,true), (0,true))
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 0 2 M
DEBUG: 0 1 .
DEBUG: 0 0 *
DEBUG: 1 1 X
DEBUG 0: List((0,false), (0,true), (0,false), (0,false))
DEBUG 1: 0 List((0,true))
DEBUG 3: 0 List((0,true))
DEBUG: 1 2 .
DEBUG 0: List((0,false), (0,false), (0,false), (0,false))
DEBUG 1: 0 List()
DEBUG 3: 0 List()
DEBUG 0: List((0,false), (0,true), (0,true), (0,false))
DEBUG 1: 0 List((0,true), (0,true))
(0,true)
DEBUG 3: 0 List((0,true), (0,true))
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 0 1 .
DEBUG 0: List((0,false), (0,true), (0,false), (0,false))
DEBUG 1: 0 List((0,true))
DEBUG 3: 0 List((0,true))
DEBUG: 1 2 .
DEBUG 0: List((0,false), (0,false), (0,false), (0,false))
DEBUG 1: 0 List()
DEBUG 3: 0 List()
DEBUG: 0 2 M
DEBUG 0: List((0,false), (0,true), (0,true), (0,false))
DEBUG 1: 0 List((0,true), (0,true))
DEBUG 3: 0 List((0,true), (0,true))
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
DEBUG: 0 0 *
DEBUG: 1 1 X
DEBUG: 0 1 .
DEBUG 0: List((0,false), (0,true), (0,false), (0,false))
DEBUG 1: 0 List((0,true))
DEBUG 3: 0 List((0,true))
DEBUG: 1 2 .
DEBUG 0: List((0,false), (0,false), (0,false), (0,false))
DEBUG 1: 0 List()
DEBUG 3: 0 List()
DEBUG: 0 2 M
DEBUG 0: List((0,false), (0,true), (0,true), (0,false))
DEBUG 1: 0 List((0,true), (0,true))
DEBUG 3: 0 List((0,true), (0,true))
(0,true)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:67: error: type mismatch;
 found   : Boolean(false)
 required: Int
            (0, false),
                ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:72: error: type mismatch;
 found   : Boolean(false)
 required: Int
            (0, false),
                ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:77: error: type mismatch;
 found   : Boolean(false)
 required: Int
           (0, false),
               ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:82: error: type mismatch;
 found   : Boolean(false)
 required: Int
            (0, false)
                ^
four errors found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
wandsB
wandsB
wandsB
(1,1)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
1
0
2
(1,1)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
--------------------------------------------------
0
1
0
0
1
1
1
1
1
1
1
2
1
1
1
1
2
1
1
1
1
1
2
1
1
(3,1)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
3
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impresive
Impresive
Oops
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impressed
Impressed
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impressed
Impressed
Impressed
Impressed
Oops!
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
java.lang.StringIndexOutOfBoundsException: String index out of range: 2
	at java.lang.String.charAt(String.java:658)
	at scala.collection.immutable.StringOps$.apply$extension(StringOps.scala:37)
	at Main$.$anonfun$new$4(count-luck.scala:117)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.$anonfun$new$3(count-luck.scala:116)
	at scala.util.control.Breaks.breakable(Breaks.scala:38)
	at Main$.$anonfun$new$2(count-luck.scala:116)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.$anonfun$new$1(count-luck.scala:110)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.delayedEndpoint$Main$1(count-luck.scala:99)
	at Main$delayedInit$body.apply(count-luck.scala:47)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at Main$.main(count-luck.scala:47)
	at Main.main(count-luck.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.ScriptRunner.runCompiled(ScriptRunner.scala:170)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1$adapted(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$withCompiledScript$2(ScriptRunner.scala:156)
	at scala.tools.nsc.ScriptRunner.runScript(ScriptRunner.scala:124)
	at scala.tools.nsc.ScriptRunner.runScriptAndCatch(ScriptRunner.scala:200)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:63)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
java.lang.StringIndexOutOfBoundsException: String index out of range: 2
	at java.lang.String.charAt(String.java:658)
	at scala.collection.immutable.StringOps$.apply$extension(StringOps.scala:37)
	at Main$.$anonfun$new$4(count-luck.scala:117)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.$anonfun$new$3(count-luck.scala:116)
	at scala.util.control.Breaks.breakable(Breaks.scala:38)
	at Main$.$anonfun$new$2(count-luck.scala:116)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.$anonfun$new$1(count-luck.scala:110)
	at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:156)
	at Main$.delayedEndpoint$Main$1(count-luck.scala:99)
	at Main$delayedInit$body.apply(count-luck.scala:47)
	at scala.Function0.apply$mcV$sp(Function0.scala:34)
	at scala.Function0.apply$mcV$sp$(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App.$anonfun$main$1$adapted(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:378)
	at scala.App.main(App.scala:76)
	at scala.App.main$(App.scala:74)
	at Main$.main(count-luck.scala:47)
	at Main.main(count-luck.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader.$anonfun$run$2(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.asContext(ScalaClassLoader.scala:32)
	at scala.reflect.internal.util.ScalaClassLoader.asContext$(ScalaClassLoader.scala:30)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:129)
	at scala.reflect.internal.util.ScalaClassLoader.run(ScalaClassLoader.scala:98)
	at scala.reflect.internal.util.ScalaClassLoader.run$(ScalaClassLoader.scala:90)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:129)
	at scala.tools.nsc.CommonRunner.run(ObjectRunner.scala:22)
	at scala.tools.nsc.CommonRunner.run$(ObjectRunner.scala:21)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.CommonRunner.runAndCatch$(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.ScriptRunner.runCompiled(ScriptRunner.scala:170)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$runScript$1$adapted(ScriptRunner.scala:187)
	at scala.tools.nsc.ScriptRunner.$anonfun$withCompiledScript$2(ScriptRunner.scala:156)
	at scala.tools.nsc.ScriptRunner.runScript(ScriptRunner.scala:124)
	at scala.tools.nsc.ScriptRunner.runScriptAndCatch(ScriptRunner.scala:200)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:63)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:88)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:99)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:104)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
479
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
3
4
4
3
3
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Oops!
Oops!
Oops!
Oops!
Impressed
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:59: error: type mismatch;
 found   : Unit
 required: (Int, Int)
      found = true
            ^
one error found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Oops!
Oops!
Oops!
Oops!
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:87: error: ')' expected but double literal found.
      val wands: List[(Int, Int, Boolean)] = l.filter(_.3 == true)
                                                       ^
one error found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:65: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix + 1, iy)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:67: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false),
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:70: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix - 1, iy)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:72: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false),
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:75: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix, iy + 1)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:77: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
           (0, 0, false),
           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:80: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix, iy - 1)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:82: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false)
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:87: error: value _3 is not a member of (Int, Int)
      val wands: List[(Int, Int, Boolean)] = l.filter(_._3 == true)
                                                        ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:91: error: not found: value wandsN
          (1 + wandsN, 1, true)
               ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:93: error: not found: value wandsN
          (1 + wandsN, 1, false)
               ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:96: error: not found: value wandsN
          (wandsN, 1, true)
           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:98: error: not found: value wandsN
          (wandsN, 1, false)
           ^
13 errors found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:65: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix + 1, iy)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:67: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false),
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:70: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix - 1, iy)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:72: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false),
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:75: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix, iy + 1)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:77: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
           (0, 0, false),
           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:80: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            getCountOfWands(n, m, arr, arrB, ix, iy - 1)
                           ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:82: error: type mismatch;
 found   : (Int, Int, Boolean)
 required: (Int, Int)
            (0, 0, false)
            ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:88: error: value _3 is not a member of (Int, Int)
      val wands: List[(Int, Int, Boolean)] = l.filter(_._3 == true)
                                                        ^
9 errors found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
3
Oops!
4
Oops!
4
Oops!
3
Oops!
3
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:114: error: not found: value found
    found = false
    ^
one error found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
0
Oops!
0
Oops!
0
Oops!
0
Oops!
0
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
0
Oops!
0
Oops!
0
Oops!
0
Oops!
0
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
List()
List()
List()
List()
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
0
List()
Oops!
List()
List()
List()
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
List((0,1,true))
0
List()
Oops!
List()
List()
List()
List()
List()
List()
List()
List()
List()
List((0,1,true))
0
List()
Oops!
List((0,1,true))
List()
List((0,1,true))
List((0,1,true))
List()
List()
List()
List()
List((0,1,true))
List((0,1,true))
0
List()
Oops!
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
List((0,1,true))
List((0,1,true))
List((0,1,true))
List((0,1,true))
0
List()
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:85: error: not found: value wands
      pw.println(wands)
                 ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:86: error: not found: value wands
      if(!wands.isEmpty) {
          ^
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:97: error: not found: value wandsN
        (wandsN, 1, false)
         ^
three errors found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
/home/jose/Documents/Repos/competitive-programming/AlgorithmsSearch/count-luck.scala:97: error: not found: value wandsN
        (wandsN, 1, false)
         ^
one error found
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
List()
List()
List()
List()
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
1
List()
Oops!
List()
List()
List()
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
List((1,1,true))
2
List()
Oops!
List()
List()
List()
List()
List()
List()
List()
List()
List()
List((0,1,true))
1
List()
Oops!
List((0,1,true))
List()
List((0,1,true))
List((1,1,true))
List()
List()
List()
List()
List((1,1,true))
List((2,1,true))
2
List()
Oops!
List()
List()
List()
List((0,1,true))
List()
List((0,1,true))
List((1,1,true))
List((1,1,true))
List((2,1,true))
List((2,1,true))
3
List()
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
1
Oops!
2
Oops!
1
Oops!
2
Oops!
3
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
1
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
1
Oops!
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impressed
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impressed
Impressed
Impressed
Impressed
Impressed
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ scala count-luck.scala < input.txt 
Impressed
jose@debian:~/Documents/Repos/competitive-programming/AlgorithmsSearch$ 